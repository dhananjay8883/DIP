import cv2
import matplotlib.pyplot as plt
import numpy as np

dollar = cv2.imread('varad.png', cv2.IMREAD_GRAYSCALE)
# Create arrays for each bit plane
plane1_MSB = np.zeros_like(dollar)
plane2 = np.zeros_like(dollar)
plane3 = np.zeros_like(dollar)
plane4 = np.zeros_like(dollar)
plane5 = np.zeros_like(dollar)
plane6 = np.zeros_like(dollar)
plane7 = np.zeros_like(dollar)
plane8_LSB = np.zeros_like(dollar)
# Extract each bit plane
for i in range(len(dollar)):
 for j in range(len(dollar[0])):
     value = dollar[i][j]
     plane1_MSB[i][j] = value >> 7 & 1
     plane2[i][j] = value >> 6 & 1
     plane3[i][j] = value >> 5 & 1
     plane4[i][j] = value >> 4 & 1
     plane5[i][j] = value >> 3 & 1
     plane6[i][j] = value >> 2 & 1
     plane7[i][j] = value >> 1 & 1
     plane8_LSB[i][j] = value & 1
     
# Plotting the images
fig, axs = plt.subplots(3, 3, figsize=(10, 10))

# Display the original image

axs[0, 0].imshow(dollar, cmap='gray')
axs[0, 0].set_title('Original Image')
axs[0, 0].axis('off')

# Display the bit planes
axs[0, 1].imshow(plane1_MSB, cmap='gray')
axs[0, 1].set_title('Plane 1 (MSB)')
axs[0, 1].axis('off')

axs[0, 2].imshow(plane2, cmap='gray')
axs[0, 2].set_title('Plane 2')
axs[0, 2].axis('off')

axs[1, 0].imshow(plane3, cmap='gray')
axs[1, 0].set_title('Plane 3')
axs[1, 0].axis('off')

axs[1, 1].imshow(plane4, cmap='gray')
axs[1, 1].set_title('Plane 4')
axs[1, 1].axis('off')

axs[1, 2].imshow(plane5, cmap='gray')
axs[1, 2].set_title('Plane 5')
axs[1, 2].axis('off')

axs[2, 0].imshow(plane6, cmap='gray')
axs[2, 0].set_title('Plane 6')
axs[2, 0].axis('off')

axs[2, 1].imshow(plane7, cmap='gray')
axs[2, 1].set_title('Plane 7')
axs[2, 1].axis('off')

axs[2, 2].imshow(plane8_LSB, cmap='gray')
axs[2, 2].set_title('Plane 8 (LSB)')
axs[2, 2].axis('off')

# Adjust layout to prevent overlap
plt.tight_layout()
plt.show()
plt.savefig('Bit plane Slicing.png')
#-------------------------------------------------------------------------------
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the grayscale image
image_path = 'varad.png'
coffee = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

# Get input values for contrast stretching
r1 = int(input('Enter r1: '))
s1 = int(input('Enter s1: '))
r2 = int(input('Enter r2: '))
s2 = int(input('Enter s2: '))

# Apply contrast stretching
contrast = np.zeros_like(coffee, dtype=np.uint8)
for i in range(coffee.shape[0]):
    for j in range(coffee.shape[1]):
        pixel = coffee[i, j]
        if pixel < r1:
            contrast[i, j] = s1
        elif pixel > r2:
            contrast[i, j] = s2
        else:
            contrast[i, j] = int(((s2 - s1) / (r2 - r1)) * (pixel - r1) + s1)

# Display images
plt.figure(figsize=(8, 4))

plt.subplot(1, 2, 1)
plt.imshow(coffee, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(contrast, cmap='gray')
plt.title('Contrast Stretched Image')
plt.axis('off')

plt.tight_layout()
plt.show()

# Save the contrast-stretched image
plt.savefig('Contrast Stretching.png')
#------------------------------------------------------------
import cv2
import numpy as np
import matplotlib.pyplot as plt
# Read grayscale image
gls_img = cv2.imread('varad.png', cv2.IMREAD_GRAYSCALE)

# User input for intensity range
A = int(input('Enter lower value (A): '))
B = int(input('Enter higher value (B): '))

# Show original image
plt.figure(figsize=(12, 4))
plt.subplot(1, 3, 1)
plt.title('Original Image')
plt.imshow(gls_img, cmap='gray')
plt.axis('off')

# Intensity Slicing Without Background
gls_img_no_bg = np.zeros_like(gls_img)

for i in range(gls_img.shape[0]):
    for j in range(gls_img.shape[1]):
        if A <= gls_img[i, j] <= B:
            gls_img_no_bg[i, j] = 255

plt.subplot(1, 3, 2)
plt.title('Without Background')
plt.imshow(gls_img_no_bg, cmap='gray')
plt.axis('off')

# Intensity Slicing With Background
gls_img_bg = np.copy(gls_img)
for i in range(gls_img.shape[0]):
    for j in range(gls_img.shape[1]):
        if A <= gls_img[i, j] <= B:
            gls_img_bg[i, j] =gls_img[i,j]



plt.subplot(1, 3, 3)
plt.title('With Background')
plt.imshow(gls_img_bg, cmap='gray')
plt.axis('off')

plt.tight_layout()
plt.savefig('Intensity_Slicing_Result.png')  # Saves the result
plt.show()
#----------------------------------------------------------------------